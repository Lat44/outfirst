/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { Vessel } from "./Vessel";
import { VesselCountArgs } from "./VesselCountArgs";
import { VesselFindManyArgs } from "./VesselFindManyArgs";
import { VesselFindUniqueArgs } from "./VesselFindUniqueArgs";
import { DeleteVesselArgs } from "./DeleteVesselArgs";
import { VesselService } from "../vessel.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Vessel)
export class VesselResolverBase {
  constructor(
    protected readonly service: VesselService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Vessel",
    action: "read",
    possession: "any",
  })
  async _vesselsMeta(
    @graphql.Args() args: VesselCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Vessel])
  @nestAccessControl.UseRoles({
    resource: "Vessel",
    action: "read",
    possession: "any",
  })
  async vessels(@graphql.Args() args: VesselFindManyArgs): Promise<Vessel[]> {
    return this.service.vessels(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Vessel, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Vessel",
    action: "read",
    possession: "own",
  })
  async vessel(
    @graphql.Args() args: VesselFindUniqueArgs
  ): Promise<Vessel | null> {
    const result = await this.service.vessel(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Vessel)
  @nestAccessControl.UseRoles({
    resource: "Vessel",
    action: "delete",
    possession: "any",
  })
  async deleteVessel(
    @graphql.Args() args: DeleteVesselArgs
  ): Promise<Vessel | null> {
    try {
      return await this.service.deleteVessel(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
